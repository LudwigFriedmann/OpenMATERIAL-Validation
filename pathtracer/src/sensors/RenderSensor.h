//
// Copyright (C) 2019-2023, Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
//

/// @file      RenderSensor.h
/// @author    Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
/// @copyright (C) 2019-2023, Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
/// @date      2019-09-30
/// @brief     Base class for all rendering sensors

#ifndef RENDERSENSOR_H
#define RENDERSENSOR_H

#include <cstring>

#include "RenderRay.h"
#include "RandomSampler.h"

/// @brief Auxilliary structure for sensor position representation. 
struct ViewPoint final
{
    /// @brief Viewpoint @a location.
    fvec3 m_position;
    /// @brief Viewpoint coordinate system.
    fmat3 m_rotation;

    /// @brief Creates new empty instance of @c ViewPoint .
    ViewPoint() noexcept;
    /// @brief Sets position to @p pos and rotation to a column-built matrix
    /// out of @p xdir , @p ydir and @p zdir .
    ViewPoint(const fvec3 loc, const fvec3 xdir, const fvec3 ydir, const fvec3 zdir) noexcept;
};

/**
 * @brief @c RenderSensor class is used to represent the basic general sensor interface
 * required for rendering in the scope of @a bidirectional-pathtracing workflow.
 * Inherit from this one and implement a minimal interface.
 */
class RenderSensor
{
protected:
    /// @protectedsection Intrinsic utility interface for shared data and resources.

    /// @brief @a Width of the sensor grid.
    int m_iWidth;
    /// @brief @a Height of the sensor grid.
    int m_iHeight;
    /// @brief Camera @a viewpoint.
    ViewPoint m_stViewPoint;

public:
    /// @publicsection -Ctors and -vdtor.

    /// @brief Creates new empty instance of @c RenderSensor .
    RenderSensor() noexcept;
    /// @brief Default -vdtor.
    virtual ~RenderSensor() = default;

public:
    /// @publicsection Getters and setters.

    /// @brief Returns @a width of the the sensor grid.
    inline int getWidth()  const { return m_iWidth; }
    /// @brief Returns @a height of the the sensor grid.
    inline int getHeight() const { return m_iHeight; }

    /// @brief Sets current camera @a viewpoint to @p vp . 
    inline void setViewPoint(const ViewPoint &vp) noexcept { m_stViewPoint = vp; }
    /// @brief Returns current camera @a viewpoint. 
    inline ViewPoint getViewPoint() const noexcept { return m_stViewPoint; }

public:
    /// @publicsection Virtual interface.

    /// @brief Resets the internal state before rendering and allocates memory if needed.
    virtual void init() = 0;
    /// @brief Stops rendering process: all post-processing on sensor have to be performed.
    virtual void stop() = 0;

    /// @brief Functions gets ray through pixel ( @p x , @p y ) disturbed according to
    /// sensor parameters, @p sampler is to be used for generating random numbers.
    virtual RenderRay getRay(int x, int y, RandomSampler &sampler) const = 0;

    /**
     * @brief Functions brings radiance @p radiance with input ray @p inRay .
     * 
     * @details If @p inRay is the result of tracing some ray that was generated by
     * current sensor, then pointer to this ray must be passed to @p outRay .
     */
    virtual void hit(fvec3 radiance, RenderRay &inRay, RenderRay *outRay = nullptr) = 0;

    /// @brief Returns impression at pixel ( @p x , @p y ) as @a RGBA spectrum and writes to to @p v .
    virtual void getImpression(int x, int y, fvec4 v) const = 0;

    /// @brief Loads all necessary physical properties from the file.
    virtual void loadProperties(const char *) noexcept; 
};

#endif // !RENDERSENSOR_H
